<?php
/**
 * Created by PhpStorm.
 * User: rain1
 * Date: 2016/5/6
 * Time: 15:40
 */

namespace app\commands;

use Client\TaskClient;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use yii\console\Controller;
use Yii;
use yii\db\Connection;

class TaskController extends Controller
{
    const PRE_TASK_PROCESS_NAME = 'Wechat-Task-';
    const CONTROLLER_PROCESS_NAME = 'Wechat-Task-Controller';
    const UNIX_SOCKET_PATH = '/tmp/Wechat-Task-Controller.sock';
    const PHP = '/usr/local/php/bin/php';
    const MAX_RUNNING_CLIENT = 10;

    private static $cmds = ['start', 'stop', 'end', 'shutdown', 'status', 'help'];
    /** @var Logger */
    private static $logger;
    
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $logHandler = new StreamHandler(Yii::getAlias('@runtime/logs/mega-taskController.log'), \Monolog\Logger::WARNING);
        self::$logger = new Logger(self::CONTROLLER_PROCESS_NAME, [$logHandler]);
    }

    public function actionTest()
    {
//        $logHandler = new StreamHandler(Yii::getAlias('@runtime/logs/mega-task.log'), \Monolog\Logger::INFO);
//        $logger = new Logger(self::CONTROLLER_PROCESS_NAME, [$logHandler]);
//        self::$logger->error(__LINE__ . ' client start.');
//        file_put_contents(Yii::getAlias('@runtime/logs/mega-task.log'), 'test');
        echo "go";
    }

    /**
     * 任务控制器 命令: start | stop | end | status | help
     * @return int
     */
    public function actionIndex()
    {
        $args = func_get_args();
        if (!isset($args[0]) || !in_array($args[0], self::$cmds)) {
            echo 'Usage:php yii task [start | stop | end | status | help]' . PHP_EOL;
            return 1;
        }

        $cmd = $args[0];
        if ($cmd == 'help') {
            $this->getCommandHelp();
        }

        if ($this->checkProcessExist()) {
            $command = ['cmd' => $cmd];
            if (isset($args[1])) {
                $taskId = $args[1];
                $command['taskId'] = $taskId;
            }

            if ($cmd == 'shutdown') {
                $ret = $this->sendCmdToServer($command);
                self::$logger->info(__LINE__ . ' sendCmdToServer ret is' . print_r($ret, true));
                // 先获取状态，再进行kill
                if ($ret['r'] == 0) {
                    foreach($ret['data'] as $client) {
                        $this->shutdownTask($client['taskId']);
                    }
                    $this->shutdown();
                } else {
                    echo 'cmd is ' . $cmd . ' and return is ' . print_r($ret['msg'], true) . PHP_EOL;
                }
                return 0;
            }

            $ret = $this->sendCmdToServer($command);
            if ($ret['r'] == 0) {
                if ($cmd == 'status') {
                    if (empty($ret['data'])) {
                        echo 'No client is running' . PHP_EOL;
                    } else {
                        echo "Running client count is " . count($ret['data']) . PHP_EOL;
                        foreach($ret['data'] as $client) {
                            echo "Running client's task is " . $client['taskId'] . PHP_EOL;
                        }
                        echo "Waiting task count is " . count($ret['waiting']) . PHP_EOL;
                        foreach($ret['waiting'] as $waiting) {
                            echo "waiting task is " . $waiting . PHP_EOL;
                        }
                    }
                } else {
                    echo 'cmd is ' . $cmd . ' and return is ' . print_r($ret['msg'], true) . PHP_EOL;
                    return 0;
                }
            } else {
                echo 'cmd is ' . $cmd . ' and return is ' . print_r($ret['msg'], true) . PHP_EOL;
            }
            return $ret['r'];
        } else {
            if ($cmd == 'shutdown' || $cmd == 'status') {
                echo self::CONTROLLER_PROCESS_NAME . ' is not running, please check it' . PHP_EOL;
                exit;
            }

            if ($cmd == 'start') {
                if (!isset($args[1])) {
                    echo 'start client must be give taskId' . PHP_EOL;
                    return 1;
                }
                $taskId = $args[1];
                if (self::startClient(self::PHP, $taskId) === false) {
                    echo "start client fail" . PHP_EOL;
                    return 1;
                }
                echo "start client success" . PHP_EOL;
                //\swoole_process::daemon();
                $runningClient[$taskId] = ['php' => self::PHP, 'taskId' => $taskId];
                $this->startSeverSocket($runningClient);
            }
        }
        return 0;
    }

    /**
     * 创建任务
     * 注意：该命令不受控制器管理，会独立一个任务执行。请用task start 运行任务
     * @param $taskId
     * @return int
     */
    public function actionCreate($taskId)
    {
        try {
            self::$logger->info(__LINE__ . ' client start.');
            $client = new TaskClient($taskId);
            $client->connect(Yii::$app->params['mega']['host'], Yii::$app->params['mega']['port']);
            \swoole_process::daemon();
            return 0;
        } catch (\Exception $ex){
            self::$logger->error(__LINE__ . ' create client fail. errMsg:' . $ex->getMessage());
            echo __LINE__ . ' create client fail. errMsg:' . $ex->getMessage() . PHP_EOL;
            return 1;
        }
    }

    public function startSeverSocket($runningClient)
    {
        cli_set_process_title(self::CONTROLLER_PROCESS_NAME);
        $server = new \swoole_server(self::UNIX_SOCKET_PATH, 0, SWOOLE_BASE, SWOOLE_UNIX_STREAM);
        $server->runClient = $runningClient;
        $server->runClientCount = count($runningClient);
        $server->queue = new \SplQueue();
        $server->set([
            'worker_num' => 1,
            'daemonize' => true,
        ]);

        $server->on('WorkerStart', function (\swoole_server $server, $workerId) {
            //监控周期
            $server->tick(1000, function () use ($server) {
                self::$logger->info(__LINE__ . ' timer start ' . time());
                if (empty($server->runClient)) {
                    self::$logger->info(__LINE__ . ' ' . 'no client is running ');
                    return;
                };

                foreach ($server->runClient as $taskId => $client) {
                    $ret = system("ps aux | grep " . TaskController::PRE_TASK_PROCESS_NAME . $taskId . " | grep -v grep ");
                    self::$logger->info(__LINE__ . ' cmd is ' . "ps aux | grep " . TaskController::PRE_TASK_PROCESS_NAME . $taskId . " | grep -v grep " . print_r($ret, true));
                    // 任务不存在，则从运行列表中删除
                    if (empty($ret)) {
                        unset($server->runClient[$taskId]);
                        $server->runClientCount--;
                        TaskController::checkQueue($server);
                    } else {
                        self::$logger->info(__LINE__ . ' ' . TaskController::PRE_TASK_PROCESS_NAME . $taskId . ' client is running success');
                    }
                }
            });
        });


        $server->on('connect', function ($server, $fd, $from_id) {
            echo "[#" . posix_getpid() . "]\tClient@[$fd:$from_id]: Connect.\n";
        });

        $server->on('receive', function (\swoole_server $server, $fd, $from_id, $data) {
            self::$logger->info(__LINE__ . ' receive data is' . print_r($data, true));
            echo __LINE__ . ' receive data is' . print_r($data, true) . PHP_EOL;
            $opData = json_decode($data, true);
            if ($opData['cmd'] === 'start') {
                if (isset($server->runClient[$opData['taskId']])) {
                    $server->send($fd, json_encode(['r' => 1, 'msg' => TaskController::PRE_TASK_PROCESS_NAME . $opData['taskId'] . ' is already running']));
                    self::$logger->info(__LINE__ . ' receive data is ' . json_encode(array('r' => 1, "msg" => TaskController::PRE_TASK_PROCESS_NAME . $opData['taskId'] . ' is already running')));
                    return;
                }

                if ($server->runClientCount >= TaskController::MAX_RUNNING_CLIENT) {
                    $server->queue->push($opData['taskId']);
                    $server->send($fd, json_encode(['r' => 0, 'msg' => "start client success"]));
                    return;
                }

                if (TaskController::startClient(TaskController::PHP, $opData['taskId']) !== false) {
                    $server->runClient[$opData['taskId']] = ['php' => TaskController::PHP, 'taskId' => $opData['taskId']];
                    $server->runClientCount++;
                    $server->send($fd, json_encode(['r' => 0, 'msg' => "start client success"]));
                } else {
                    $server->send($fd, json_encode(['r' => '400', 'msg' => 'start client fail']));
                }

            } else if ($opData['cmd'] === 'shutdown') {
                self::$logger->info(__LINE__ . " cmd is shutdown " . print_r($server->runClient, true));
                $server->send($fd, json_encode(array('r' => 0, 'data' => $server->runClient)));
                unset($server->runClient);
                unset($server->queue);
                return;
            } else if ($opData['cmd'] === 'status') {
                self::$logger->info(__LINE__ . " cmd is status " . print_r($server->runClient, true));
                $waiting = [];
                foreach($server->queue as $value) {
                    $waiting[] = $value;
                }
                $server->send($fd, json_encode(['r' => 0, 'data' => $server->runClient, 'waiting' => $waiting]));
                return;
            } else if ($opData['cmd'] === 'end') {
                $taskName = TaskController::PRE_TASK_PROCESS_NAME . $opData['taskId'];
                // 不处于运行队列，则检查等待队列，若都无则发送不存在消息
                if (!isset($server->runClient[$opData['taskId']])) {
                    if ($this->unsetQueueByTaskId($opData['taskId'], $server)) {
                        $server->send($fd, json_encode(['r' => '0', 'msg' => "end {$taskName} [SUCCESS]"]));
                        self::$logger->info("end {$taskName} [SUCCESS]");
                        return;
                    }
                    $server->send($fd, json_encode(['r' => 1, 'msg' => $taskName . ' not exists']));
                    self::$logger->info(__LINE__ . ' receive data is ' . json_encode(array('r' => 1, "msg" => $taskName . ' not exists')));
                    return;
                }

                $pid = TaskController::getClientPid($taskName);
                if (posix_kill($pid, SIGINT)) {//如果成功了
                    unset($server->runClient[$opData['taskId']]);
                    $server->runClientCount--;
                    TaskController::checkQueue($server);
                    $server->send($fd, json_encode(['r' => '0', 'msg' => "end {$taskName} [SUCCESS]"]));
                    self::$logger->info("end {$taskName} [SUCCESS]");
                } else {
                    $server->send($fd, json_encode(['r' => '1', 'msg' => "end {$taskName} [FAIL]"]));
                    self::$logger->error("end {$taskName} [FAIL]");
                }
            } else if ($opData['cmd'] == 'stop') {
                if (!isset($server->runClient[$opData['taskId']])) {
                    $server->send($fd, json_encode(['r' => 1, 'msg' => TaskController::PRE_TASK_PROCESS_NAME . $opData['taskId'] . ' not exists']));
                    self::$logger->info(__LINE__ . ' receive data is ' . json_encode(array('r' => 1, "msg" => TaskController::PRE_TASK_PROCESS_NAME . $opData['taskId'] . ' not exists')));
                    return;
                }

                $taskName = TaskController::PRE_TASK_PROCESS_NAME . $opData['taskId'];
                $pid = TaskController::getClientPid($taskName);
                if (posix_kill($pid, SIGTERM)) {//如果成功了
                    unset($server->runClient[$opData['taskId']]);
                    $server->runClientCount--;
                    TaskController::checkQueue($server);
                    $server->send($fd, json_encode(['r' => '0', 'msg' => "end {$taskName} [SUCCESS]"]));
                    self::$logger->info("stop {$taskName} [SUCCESS]");
                } else {
                    $server->send($fd, json_encode(['r' => '1', 'msg' => "end {$taskName} [FAIL]"]));
                    self::$logger->error("stop {$taskName} [FAIL]");
                }
            }
        });

        $server->on('close', function (\swoole_server $server, $fd, $from_id) {
            echo "[#" . posix_getpid() . "]\tClient@[$fd:$from_id]: Close.\n";
            self::$logger->info(__LINE__ . " Client@[$fd:$from_id] close");
        });

        $server->start();
    }

    /**
     * 检查等待队列里的任务
     * @param \swoole_server $server
     */
    public static function checkQueue($server)
    {
        if (isset($server->queue) && !$server->queue->isEmpty()) {
            $taskId = $server->queue->pop();
            if (TaskController::startClient(TaskController::PHP, $taskId) !== false) {
                $server->runClient[$taskId] = ['php' => TaskController::PHP, 'taskId' => $taskId];
                $server->runClientCount++;
            } else {
                $server->queue->push($taskId);
            }
        }
    }

    /**
     * 删除等待队列中的任务
     * @param $taskId
     * @param $server
     * @return bool
     */
    public static function unsetQueueByTaskId($taskId, $server)
    {
        foreach($server->queue as $key => $value) {
            if ($value == $taskId) {
                $server->queue->offsetUnset($key);
                return true;
            }
        }
        return false;
    }

    public static function startClient($php, $taskId)
    {
        $process = new \swoole_process(function (\swoole_process $worker) use ($php, $taskId) {
            $worker->exec($php, [Yii::getAlias('@app/yii'), 'task/create', $taskId]);//拉起client
            self::$logger->info(__LINE__ . '   ' . $php . ' ' . 'yii task/create ' . $taskId);
        }, false);
        $process->start();
        $exeRet = \swoole_process::wait();
        $taskName = TaskController::PRE_TASK_PROCESS_NAME . $taskId;
        if ($exeRet['code']) {//创建失败
            self::$logger->error("start {$taskName} [FAIL]" );
            return false;
        } else {
            self::$logger->info("start {$taskName} [SUCCESS]");
            return true;
        }
    }

    /**
     * 获取运行任务中client的进程id
     * @param $clientName
     * @return mixed
     */
    public static function getClientPid($clientName)
    {
        $ret = system("ps aux | grep " . $clientName . " | grep -v grep ");
        preg_match('/\d+/', $ret, $match);//匹配出来进程号
        return $match['0'];
    }

    /**
     * 关闭运行任务中的client
     * @param $taskId
     */
    public function shutdownTask($taskId)
    {
        $taskName = TaskController::PRE_TASK_PROCESS_NAME . $taskId;
        $pid = TaskController::getClientPid($taskName);
        if (posix_kill($pid, 15)) {//如果成功了
            echo 'shutdown ' . $taskName . "\033[32;40m [SUCCESS] \033[0m" . PHP_EOL;
            self::$logger->info("shutdown {$taskName} [SUCCESS]");
        } else {
            echo 'shutdown ' . $taskName . "\033[31;40m [FAIL] \033[0m" . PHP_EOL;
            self::$logger->error("shutdown {$taskName} [FAIL]");
        }
    }

    /**
     * 关闭控制器守护进程
     */
    public function shutdown()
    {
        $ret = system("ps aux | grep " . self::CONTROLLER_PROCESS_NAME . " | grep -v grep ");
        preg_match('/\d+/', $ret, $match);
        $serverId = $match['0'];
        if (posix_kill($serverId, 15)) {//如果成功了
            echo 'shutdown ' . self::CONTROLLER_PROCESS_NAME . "\033[32;40m [SUCCESS] \033[0m" . PHP_EOL;
        } else {
            echo 'shutdown ' . self::CONTROLLER_PROCESS_NAME . "\033[31;40m [FAIL] \033[0m" . PHP_EOL;
        }
    }

    //用于和守护进程进行通信
    function sendCmdToServer($data)
    {
        $client = new \swoole_client(SWOOLE_UNIX_STREAM, SWOOLE_SOCK_SYNC);
        $client->connect(self::UNIX_SOCKET_PATH, 0, 3);
        $client->send(json_encode($data));
        $ret = $client->recv();
        self::$logger->info(__LINE__ . print_r($ret, true));
        $ret = json_decode($ret, true);
        $client->close();
        return $ret;
    }

    public function checkProcessExist()
    {
        $ret = exec("ps aux | grep " . self::CONTROLLER_PROCESS_NAME . " | grep -v grep ");
        self::$logger->info(__LINE__ . " ps aux | grep " . self::CONTROLLER_PROCESS_NAME . " | grep -v grep and return " . print_r($ret, true));
        if (empty($ret)) {//挂了 什么都没有  之后可能要通过数量来获取}
            return false;
        } else {
            return true;
        }
    }

    public function getCommandHelp()
    {
        $helpText = <<<Help
------欢迎使用Mega-wechat控制器------
开始任务命令：start [taskId]
暂停任务命令: stop [taskId]
终止任务命令：end [taskId]
运行中的任务：status
关闭控制器  ：shutdown
------------------------------------

Help;
        echo $helpText;
        exit();
    }

}